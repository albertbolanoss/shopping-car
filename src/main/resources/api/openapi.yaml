openapi: 3.0.3
info:
  title: Sample Ecommerce App
  description: >
    'This is a ***sample ecommerce app API***.  You can find out more about Swagger at [swagger.io](http://swagger.io).
    Description supports markdown markup. For example, you can use the `inline code` using back ticks.'
  termsOfService: https://github.com/PacktPublishing/Modern-API-Development-with-Spring-6-and-Spring-Boot-3/blob/main/LICENSE
  contact:
    name: Packt Support
    url: https://www.packt.com
    email: support@packtpub.com
  license:
    name: MIT
    url: https://github.com/PacktPublishing/Modern-API-Development-with-Spring-6-and-Spring-Boot-3/blob/main/LICENSE
  version: 1.0.0
externalDocs:
  description: Any document link you want to generate along with API.
  url: http://swagger.io
servers:
  - url: https://ecommerce.swagger.io/v2
tags:
  - name: Customer
    description: Operations about customer
paths:
  /api/v1/customer:
    post:
      tags: [Customer]
      summary: Register a new customer.
      description: Register a new customer to the E-Commerce App.
      operationId: createCustomer
      requestBody:
        required: true
        description: New Customer
        content:
          application/xml:
            schema:
              $ref: '#/components/schemas/AddCustomerReq'
          application/json:
            schema:
              $ref: '#/components/schemas/AddCustomerReq'
      responses:
        201:
          description: Customer created successfuly
        409:
          description: If the customer already existed.
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: If customer does not exist.
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Error'
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  schemas:
    Customer:
      type: object
      properties:
        id:
          type: string
          format: uuid
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        phone:
          type: string
        password:
          type: string
        active:
          type: boolean
          description: User Status
      xml:
        name: User
    AddCustomerReq:
      description: Request object for new user registration.
      type: object
      properties:
        firstName:
          type: string
          minLength: 1
          maxLength: 125
        lastName:
          type: string
          minLength: 1
          maxLength: 125
        email:
          type: string
          format: email
          minLength: 1
          maxLength: 255
        phone:
          type: string
          maxLength: 40
        password:
          type: string
          minLength: 1
          maxLength: 255
      required:
        - firstName
        - lastName
        - email
        - password


      xml:
        name: AddCustomerReq
    Error:
      type: object
      properties:
        errorCode:
          type: string
        message:
          type: string
        status:
          type: integer
          format: int32
        url:
          type: string
        reqMethod:
          type: string
      xml:
        name: Error