openapi: 3.0.3
info:
  title: Sample Ecommerce App
  description: >
    'This is a ***sample ecommerce app API***.  You can find out more about Swagger at [swagger.io](http://swagger.io).
    Description supports markdown markup. For example, you can use the `inline code` using back ticks.'
  termsOfService: https://github.com/PacktPublishing/Modern-API-Development-with-Spring-6-and-Spring-Boot-3/blob/main/LICENSE
  contact:
    name: Packt Support
    url: https://www.packt.com
    email: support@packtpub.com
  license:
    name: MIT
    url: https://github.com/PacktPublishing/Modern-API-Development-with-Spring-6-and-Spring-Boot-3/blob/main/LICENSE
  version: 1.0.0
externalDocs:
  description: Any document link you want to generate along with API.
  url: http://swagger.io
servers:
  - url: https://ecommerce.swagger.io/v2
tags:
  - name: Customer
    description: Operations about customer
  - name: Cart
    description: Operations about shopping cart
  - name: Product
    description: Operations about products

paths:
  /api/v1/customer:
    post:
      tags: [Customer]
      summary: Register a new customer.
      description: Register a new customer to the E-Commerce App.
      operationId: createCustomer
      requestBody:
        required: true
        description: New Customer
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddCustomerReq'
      responses:
        201:
          description: Customer created successfuly
        409:
          description: If the customer already existed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: If customer does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/v1/product:
    post:
      tags: [ Product ]
      summary: Register a new product.
      description: Register a new product to the E-Commerce App.
      operationId: addProduct
      requestBody:
        required: true
        description: Create a new Product
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddProductReq'
      responses:
        201:
          description: Product created successfuly
        409:
          description: If the product already existed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/v1/customer/{customerId}/items:
    get:
      tags: [ Cart ]
      summary: Returns the list of items in customer's shopping cart
      description: Returns the items in shopping cart of given customer
      operationId: getCartItemsByCustomerId
      parameters:
        - name: customerId
          in: path
          description: Customer Identifier
          required: true
          schema:
            type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Item'
        404:
          description: Given customer ID doesn't exist
          content: { }
    delete:
      tags: [ Cart ]
      summary: Delete all items from shopping cart
      description: Deletes all items of a product from shopping cart of given customer id
      operationId: deleteProductFromCart
      parameters:
        - name: customerId
          in: path
          description: Customer Identifier
          required: true
          schema:
            type: string
      responses:
        202:
          description: Accepts the request, regardless of whether the specified item exists in the cart or not.
        404:
          description: Given customer ID doesn't exist
          content: { }

  /api/v1/customer/{customerId}/product/{productId}/item:
    post:
      tags: [ Cart ]
      summary: Add a new item to the cart.
      description: Add a new product to the cart.
      operationId: addItemToCart
      parameters:
        - name: customerId
          in: path
          description: Customer Identifier
          required: true
          schema:
            type: string
        - name: productId
          in: path
          description: Product Identifier
          required: true
          schema:
            type: string
      responses:
        201:
          description: Item was added successfuly
        404:
          description: If customer does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags: [ Cart ]
      summary: Delete an item from shopping cart
      description: Deletes the item from shopping cart of given customer
      operationId: deleteItemFromCart
      parameters:
        - name: customerId
          in: path
          description: Customer Identifier
          required: true
          schema:
            type: string
        - name: productId
          in: path
          description: Product Identifier
          required: true
          schema:
            type: string
      responses:
        202:
          description: Accepts the request, regardless of whether the specified item exists in the cart or not.
components:
  schemas:
    AddCustomerReq:
      description: Request object for new customer registration.
      type: object
      properties:
        firstName:
          type: string
          minLength: 1
          maxLength: 125
        lastName:
          type: string
          minLength: 1
          maxLength: 125
        email:
          type: string
          format: email
          minLength: 1
          maxLength: 255
        phone:
          type: string
          maxLength: 40
        password:
          type: string
          minLength: 1
          maxLength: 255
      required:
        - firstName
        - lastName
        - email
        - password
      xml:
        name: AddCustomerReq
    Error:
      type: object
      properties:
        errorCode:
          type: string
        message:
          type: string
        status:
          type: integer
          format: int32
        url:
          type: string
        reqMethod:
          type: string
      xml:
        name: Error
    Item:
      description: Items in shopping cart
      type: object
      properties:
        id:
          description: Item Identifier (Product)
          type: string
        quantity:
          description: The item quantity
          type: integer
          format: int32
        unitPrice:
          description: The item's price per unit
          type: number
          format: number
    AddProductReq:
      description: Product to sell
      type: object
      properties:
        name:
          description: The product name
          type: string
          minLength: 1
          maxLength: 150
        code:
          description: The product code
          type: string
          minLength: 1
          maxLength: 100
        description:
          description: Product's description
          type: string
          minLength: 1
          maxLength: 255
        unitPrice:
          description: The item's price per unit
          type: number
          format: number
        count:
          description: Product count
          type: integer
          format: int32
      required:
        - name
        - code
        - count

